void GEMRawDecoder::DecodeFEC( unsigned int * buf, int n) {
    cout << "GEMRawDecoder::DecodeFEC( unsigned int * buf, int n) enter n=" << n << endl;
  clearFECMaps();
  fBufferSize = n;
  if(fBufferSize <= 0) return;
  SwitchEndianess(buf, fBufferSize);

  int channel_active = 1;
  vector<int> apv;
  apv.clear();
  for(int idata = 0;idata<fBufferSize;idata++) {          
    //    if (idata ==0) cout<<"buf: "<<fBufferSize<<endl;
    //    if (idata ==0)  printf("       == GEMRawDecoder::DecodeFEC() => bufferSize = %d  \n", fBufferSize) ;
    if( ( (buf[idata+1]>>8) & 0xffffff ) == 0x414443 ) {
      if(apv.size() > APV_MIN_LENGTH && channel_active==1) mFecApvEvent[apvIndex] = apv;
      apv.clear();
      nadcCh = buf[idata+1] & 0xff; 
      nfecID = (buf[idata+2]>>16) & 0xff;
      apvIndex = (nfecID<<4) | nadcCh;
      idata+=2;
      channel_active = 1;
      if( ! IsAdcChannelActive(nfecID, nadcCh) ) {
	channel_active = 0;
	CheckInactiveChannel(idata+3, buf);
      }
    }
    else if( buf[idata+1] == 0xfafafafa ) {
      if(channel_active) {
	FillAPVRaw(apv, buf[idata]);
	if(apv.size() > APV_MIN_LENGTH ) mFecApvEvent[apvIndex] = apv;
	apv.clear();
      }
      idata+=1;
    }
    else {
      if(channel_active) FillAPVRaw(apv, buf[idata]);
    }
  }
}

